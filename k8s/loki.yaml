---
apiVersion: v1
kind: ConfigMap
data:
  config.yml: |-
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory

    ruler:
      storage:
        type: local
        local:
          directory: /tmp/rules
      ring:
        kvstore:
          store: inmemory
      alertmanager_url: http://alert-manager:9093
      enable_alertmanager_v2: true
      enable_api: true
      enable_sharding: true
      rule_path: /etc/loki/rules

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    # By default, Loki will send anonymous, but uniquely-identifiable usage and configuration
    # analytics to Grafana Labs. These statistics are sent to https://stats.grafana.org/
    #
    # Statistics help us better understand how Loki is used, and they show us performance
    # levels for most users. This helps us prioritize features and documentation.
    # For more information on what's sent, look at
    # https://github.com/grafana/loki/blob/main/pkg/usagestats/stats.go
    # Refer to the buildReport method to see what goes into a report.
    #
    # If you would like to disable reporting, uncomment the following lines:
    analytics:
      reporting_enabled: false
  rules.yml: |-
    groups:
      - name: loki-example
        rules:
          - alert: HighPercentageError
            expr: |
              sum({app=~"go-.*"}) > 5
            for: 1s
            labels:
              severity: warning
            annotations:
              summary: High request latency
              title: "High LogRate Alert"
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: loki
  name: loki-cm
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.33.0 (HEAD)
  labels:
    io.kompose.service: loki
  name: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: loki
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.33.0 (HEAD)
      labels:
        io.kompose.network/prometheus-loki-grafana-go-localprom: "true"
        io.kompose.service: loki
    spec:
      containers:
        - name: loki
          args:
            - -config.file=/etc/loki/config.yml
          image: grafana/loki:2.9.0
          ports:
            - containerPort: 3100
              hostPort: 3100
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/loki/config.yml
              name: loki-cm
              subPath: config.yml
            - mountPath: /etc/loki/rules/rules.yml
              name: loki-cm
              subPath: rules.yml
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: config.yml
                path: config.yml
              - key: rules.yml
                path: rules.yml
            name: loki-cm
          name: loki-cm
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.33.0 (HEAD)
  labels:
    io.kompose.service: loki
  name: loki
spec:
  ports:
    - name: "3100"
      port: 3100
      targetPort: 3100
  selector:
    io.kompose.service: loki
